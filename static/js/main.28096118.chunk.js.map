{"version":3,"sources":["gameHelpers.js","img/anime.jpg","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","Cell","React","memo","Stage","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","sjekk","instantDrop","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,kBACvBC,MAAMC,KAAKD,MAHa,KAGQ,kBAChC,IAAIA,MALmB,IAKAE,KAAK,CAAC,EAAG,cAGvBC,EAAiB,SAACC,EAAQC,EAAT,GAC1B,IADqE,IAAvBC,EAAsB,EAAzBC,EAAaC,EAAY,EAAfC,EAC5CA,EAAI,EAAGA,EAAIL,EAAOM,UAAUC,OAAQF,IACzC,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAOM,UAAUD,GAAGE,OAAQJ,IAE5C,GAA+B,IAA3BH,EAAOM,UAAUD,GAAGF,MAGfF,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,KAEzBH,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,IAGpD,UADAD,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,GAAO,IAG1D,OAAO,G,cCtBZ,MAA0B,kCCK5BO,EAAsBC,IAAOC,IAAV,sJAGVC,GAKTC,EAAeH,IAAOC,IAAV,sQ,mBCbZG,EAAa,CACtBC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,SAC1BC,EAAG,CACCF,MAAM,CACF,CAAC,EAAE,IAAI,EAAE,GACT,CAAC,EAAE,IAAI,EAAE,GACT,CAAC,EAAE,IAAI,EAAE,GACT,CAAC,EAAE,IAAI,EAAE,IAEbC,MAAO,cAEXE,EAAG,CACCH,MAAM,CACF,CAAC,EAAE,IAAI,GACP,CAAC,EAAE,IAAI,GACP,CAAC,IAAI,IAAI,IAEbC,MAAO,aAEXG,EAAG,CACCJ,MAAM,CACF,CAAC,EAAE,IAAI,GACP,CAAC,EAAE,IAAI,GACP,CAAC,EAAE,IAAI,MAEXC,MAAO,cAEXI,EAAG,CACCL,MAAM,CACF,CAAC,IAAI,KACL,CAAC,IAAI,MAETC,MAAO,cAGXK,EAAG,CACCN,MAAM,CACF,CAAC,EAAE,IAAI,KACP,CAAC,IAAI,IAAI,GACT,CAAC,EAAE,EAAE,IAETC,MAAO,aAEXM,EAAG,CACCP,MAAM,CACF,CAAC,EAAE,EAAE,GACL,CAAC,IAAI,IAAI,KACT,CAAC,EAAE,IAAI,IAEXC,MAAO,cAEXO,EAAG,CACCR,MAAM,CACF,CAAC,IAAI,IAAI,GACT,CAAC,EAAE,IAAI,KACP,CAAC,EAAE,EAAE,IAETC,MAAO,cAIFQ,EAAkB,WAC3B,IAAMC,EAAa,UACbC,EACFD,EAAWE,KAAKC,MAAMD,KAAKE,SAAUJ,EAAWnB,SACpD,OAAOO,EAAWa,IC9DTI,EAAW,SAAC/B,EAAQgC,GAC/B,MAA0BC,mBAAStC,KAAnC,mBAAOM,EAAP,KAAciC,EAAd,KACA,EAAsCD,mBAAS,GAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAkDA,OAhDAC,qBAAU,WACRD,EAAe,GACf,IAWME,EAAc,SAAAC,GAElB,IAAMC,EAAWD,EAAUE,KAAI,SAAAC,GAAG,OAChCA,EAAID,KAAI,SAAAE,GAAI,MAAiB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QAexD,OAXA3C,EAAOM,UAAUsC,SAAQ,SAACF,EAAKrC,GAC7BqC,EAAIE,SAAQ,SAACC,EAAO1C,GACJ,IAAV0C,IACFL,EAASnC,EAAIL,EAAOQ,IAAIH,GAAGF,EAAIH,EAAOQ,IAAIL,GAAK,CAC7C0C,EAD6C,UAE1C7C,EAAO8C,SAAW,SAAW,iBAMpC9C,EAAO8C,UACTd,IA9Bc,SAAAQ,GAAQ,OACxBA,EAASO,QAAO,SAACC,EAAKN,GACpB,OAA8C,IAA1CA,EAAIO,WAAU,SAAAN,GAAI,OAAgB,IAAZA,EAAK,OAC7BP,GAAe,SAAAc,GAAI,OAAIA,EAAO,KAC9BF,EAAIG,QAAQ,IAAIvD,MAAM4C,EAAS,GAAGjC,QAAQT,KAAK,CAAC,EAAG,WAC5CkD,IAETA,EAAII,KAAKV,GACFM,KACN,IAsBMK,CAAUb,IAEZA,GAITN,GAAS,SAAAgB,GAAI,OAAIZ,EAAYY,QAC5B,CACDlD,EAAO8C,SACP9C,EAAOQ,IAAIL,EACXH,EAAOQ,IAAIH,EACXL,EAAOM,UACP0B,IAGK,CAAC/B,EAAOiC,EAAUC,ICrDdmB,EAAc5C,IAAOC,IAAV,+RAGd,SAAA4C,GAAK,OAAIA,EAAMC,UACH,SAAAD,GAAK,OAAIA,EAAME,SAED,SAAAF,GAAK,OAAIA,EAAME,SCNtCC,EAAahD,IAAOC,IAAV,+PAEA,SAAA4C,GAAK,OAAIA,EAAMtC,SACxB,SAAAsC,GAAK,OAAoB,IAAfA,EAAMI,KAAa,YAAc,eACzB,SAAAJ,GAAK,OAAIA,EAAMtC,SAChB,SAAAsC,GAAK,OAAIA,EAAMtC,SAChB,SAAAsC,GAAK,OAAIA,EAAMtC,SAChB,SAAAsC,GAAK,OAAIA,EAAMtC,S,OCLtC2C,EAAO,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAH,OACT,cAACD,EAAD,CAAYC,KAAMA,EAAM1C,MAAOH,EAAW6C,GAAM1C,SAGrC4C,MAAMC,KAAKF,GCKXG,EAPD,SAAC,GAAD,IAAE9D,EAAF,EAAEA,MAAF,OACV,cAACqD,EAAD,CAAaG,MAAOxD,EAAM,GAAGM,OAAQiD,OAAQvD,EAAMM,OAAnD,SACKN,EAAMwC,KAAI,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAACE,EAAMxC,GAAP,OAAa,cAAC,EAAD,CAAcwD,KAAMhB,EAAK,IAAdxC,YCN7C6D,EAAgBtD,IAAOC,IAAV,4RAUb,SAAA4C,GAAK,OAAKA,EAAMU,SAAW,MAAQ,UCLjCC,EAJC,SAAC,GAAD,IAAED,EAAF,EAAEA,SAAUE,EAAZ,EAAYA,KAAZ,OACZ,cAACH,EAAD,CAAeC,SAAUA,EAAzB,SAAoCE,KCF3BC,EAAoB1D,IAAO2D,OAAV,oOCKfC,EAJK,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAChB,cAACH,EAAD,CAAmBI,QAASD,EAA5B,yBCoLWE,EAzKA,WACX,MAAgCxC,mBAAS,MAAzC,mBAAOyC,EAAP,KAAiBC,EAAjB,KACA,EAAgC1C,oBAAS,GAAzC,mBAAOgC,EAAP,KAAiBW,EAAjB,KAEA,ECdqB,WACrB,MAA4B3C,mBAAS,CACjCzB,IAAK,CAAEL,EAAG,EAAGE,EAAG,GAChBC,UAAWQ,EAAW,GAAGE,MACzB8B,UAAU,IAHd,mBAAO9C,EAAP,KAAe6E,EAAf,KAMMC,EAAS,SAACC,EAAQC,GAEpB,IAAMC,EAAeF,EAAOtC,KAAI,SAACyC,EAAGC,GAAJ,OAC5BJ,EAAOtC,KAAI,SAAA2C,GAAG,OAAIA,EAAID,SAG1B,OAAIH,EAAM,EAAUC,EAAaxC,KAAI,SAAAC,GAAG,OAAIA,EAAI2C,aACzCJ,EAAaI,WA8BlBrD,EAAcsD,uBAAY,WAC5BT,EAAU,CACNrE,IAAK,CAAEL,EAAGoF,EAAqBlF,EAAG,GAClCC,UAAWmB,IAAkBT,MAC7B8B,UAAU,MAEf,IAEH,MAAO,CAAC9C,EAhBgB,SAAC,GAAuB,IAArBG,EAAoB,EAApBA,EAAGE,EAAiB,EAAjBA,EAAGyC,EAAc,EAAdA,SAC7B+B,GAAU,SAAA3B,GAAI,kCACPA,GADO,IAEV1C,IAAK,CAAEL,EAAI+C,EAAK1C,IAAIL,GAAKA,EAAIE,EAAI6C,EAAK1C,IAAIH,GAAKA,GAC/CyC,iBAYyBd,EAnCZ,SAAC/B,EAAO+E,GACzB,IAAMQ,EAAeC,KAAKC,MAAMD,KAAKE,UAAU3F,IAC/CwF,EAAalF,UAAYwE,EAAOU,EAAalF,UAAW0E,GAIxD,IAFA,IAAMxE,EAAMgF,EAAahF,IAAIL,EACzByF,EAAS,EACP7F,EAAeyF,EAAcvF,EAAO,CAAEE,EAAE,EAAGE,EAAE,KAG/C,GAFAmF,EAAahF,IAAIL,GAAKyF,GACtBA,IAAWA,GAAUA,EAAS,EAAI,GAAK,KAC1BJ,EAAalF,UAAU,GAAGC,OAGnC,OAFAuE,EAAOU,EAAalF,WAAY0E,QAChCQ,EAAahF,IAAIL,EAAIK,GAK7BqE,EAAUW,KDnB+CK,GAA7D,mBAAO7F,EAAP,KAAe8F,EAAf,KAAgC9D,EAAhC,KAA6C+D,EAA7C,KACA,EAAuChE,EAAS/B,EAAQgC,GAAxD,mBAAO/B,EAAP,KAAciC,EAAd,KACA,EEnByB,SAAAC,GACzB,MAA0BF,mBAAS,GAAnC,mBAAO+D,EAAP,KAAcC,EAAd,KACA,EAAwBhE,mBAAS,GAAjC,mBAAOiE,EAAP,KAAaC,EAAb,KACA,EAA0BlE,mBAAS,GAAnC,mBAAOmE,EAAP,KAAcC,EAAd,KAEMC,EAAa,CAAC,GAAI,IAAK,IAAK,MAE5BC,EAAYjB,uBAAY,WAEtBnD,EAAc,IAEd8D,GAAS,SAAA/C,GAAI,OAAIA,EAAOoD,EAAWnE,EAAc,IAAMiE,EAAQ,MAC/DD,GAAQ,SAAAjD,GAAI,OAAIA,EAAOf,QAE5B,CAACiE,EAAOE,EAAYnE,IAMvB,OAJAE,qBAAU,WACNkE,MACD,CAACA,EAAWpE,EAAa6D,IAErB,CAACA,EAAOC,EAAUC,EAAMC,EAASC,EAAOC,GFDWG,CAD1D,MACA,mBAAOR,EAAP,KAAcC,EAAd,KAAwBC,EAAxB,KAA8BC,EAA9B,KAAuCC,EAAvC,KAA8CC,EAA9C,KAEAI,QAAQC,IAAI,aAEZ,IAAMC,EAAa,SAAA3B,GACVjF,EAAeC,EAAQC,EAAO,CAACE,EAAG6E,EAAK3E,EAAE,KAC1CyF,EAAgB,CAAE3F,EAAG6E,EAAK3E,EAAG,KAe/BuG,EAAO,WAENV,EAAqB,IAAbE,EAAQ,KACfC,GAAS,SAAAnD,GAAI,OAAIA,EAAO,KACxByB,EAAY,KAAQyB,EAAQ,GAAK,MAGhCrG,EAAeC,EAAQC,EAAO,CAACE,EAAG,EAAGE,EAAG,KAIrCL,EAAOQ,IAAIH,EAAI,IACfoG,QAAQC,IAAI,aACZ9B,GAAY,GACZD,EAAY,OAEhBmB,EAAgB,CAAE3F,EAAE,EAAGE,EAAG,EAAGyC,UAAU,KARvCgD,EAAgB,CAAE3F,EAAG,EAAGE,EAAG,EAAGyC,UAAU,KAuF1C+D,EAAO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACN7C,IACe,KAAZ6C,EACAH,GAAY,GACO,KAAZG,EACPH,EAAW,GACQ,KAAZG,GAvEfL,QAAQC,IAAI,gBACZ/B,EAAY,MACZiC,KAuE2B,KAAZE,EACPf,EAAa9F,EAAO,GACD,KAAZ6G,GAtEC,WAChBL,QAAQC,IAAI,gBACZ/B,EAAY,MACTuB,EAAqB,IAAbE,EAAQ,KACfC,GAAS,SAAAnD,GAAI,OAAIA,EAAO,KACxByB,EAAY,KAAQyB,EAAQ,GAAK,MAGrC,IADA,IAAIW,EAAQ,GACLhH,EAAeC,EAAQC,EAAO,CAACE,EAAE,EAAGE,EAAG0G,KAC1CN,QAAQC,IAAI,aAAeK,GAC3BA,IA6CJN,QAAQC,IAAIK,GACZjB,EAAgB,CAAC3F,EAAE,EAAGE,EAAE0G,EAAM,EAAGjE,UAAS,IAgBlCkE,KASZ,OG5JG,SAAqBzC,EAAU0C,GACpC,IAAMC,EAAgBC,mBAEtB9E,qBAAU,WACR6E,EAAcE,QAAU7C,IACvB,CAACA,IAGJlC,qBAAU,WAIR,GAAc,OAAV4E,EAAgB,CAClB,IAAMI,EAAKC,aAJb,WACEJ,EAAcE,YAGeH,GAC7B,OAAO,WACLM,cAAcF,OAGjB,CAACJ,IHsIFO,EAAY,WACRZ,MACDlC,GAGC,cAACjE,EAAD,CACIgH,KAAK,SACLC,SAAS,IACTC,UAAW,SAAAC,GAAC,OAAIf,EAAKe,IACrBC,QArGM,SAAC,GAAc,EAAbf,QACP7C,IAEGwC,QAAQC,IAAI,eACZ/B,EAAY,KAAQyB,EAAQ,GAAK,OA6FzC,SAMI,eAACvF,EAAD,WACI,cAAC,EAAD,CAAOZ,MAAOA,IACd,kCACKgE,EACG,cAAC,EAAD,CAASA,SAAUA,EAAUE,KAAK,cAElC,gCACI,cAAC,EAAD,CAASA,KAAI,iBAAY6B,KACzB,cAAC,EAAD,CAAS7B,KAAI,gBAAW+B,KACxB,cAAC,EAAD,CAAS/B,KAAI,iBAAYiC,QAGjC,cAAC,EAAD,CAAa7B,SAlJX,WACdkC,QAAQC,IAAI,QACZxE,EAASvC,KACTgF,EAAY,KACZ3C,IACA4C,GAAY,GACZqB,EAAS,GACTE,EAAQ,GACRE,EAAS,eI5BFyB,MARf,WACI,OACA,8BACI,cAAC,EAAD,OCMOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.28096118.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12\r\nexport const STAGE_HEIGHT = 20\r\n\r\nexport const createStage = () =>\r\n    Array.from(Array(STAGE_HEIGHT), () => \r\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\r\n    )\r\n\r\nexport const checkCollision = (player, stage, {x: moveX, y: moveY }) => {\r\n    for (let y = 0; y < player.tetromino.length; y++) {\r\n        for (let x = 0; x < player.tetromino[y].length; x++) {\r\n            //sjekk om vi er på en tetromino celle\r\n            if (player.tetromino[y][x] !== 0) {\r\n                if(\r\n                    //sjekk at bevegelsen er inni spillets område (høyden Y)\r\n                    !stage[y + player.pos.y + moveY] || \r\n                    //sjekk at bevegelsen er inni spillets område (bredde X)\r\n                    !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                    //sjekk at cellen vi beveger til ikke er satt til \"clear\"\r\n                    stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n                    \"clear\"\r\n                ) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/anime.bbb00bc1.jpg\";","import styled from \"styled-components\"\r\nimport bgImage from \"../../img/anime.jpg\"\r\n//bg.png\r\n//anime.jpg\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 20px;\r\n    }\r\n`\r\n\r\n","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: \"0,0,0\"},\r\n    I: {\r\n        shape:[\r\n            [0,\"I\",0,0],\r\n            [0,\"I\",0,0],\r\n            [0,\"I\",0,0],\r\n            [0,\"I\",0,0]\r\n            ],\r\n        color: \"80,227,230\",\r\n    },\r\n    J: {\r\n        shape:[\r\n            [0,\"J\",0],\r\n            [0,\"J\",0],\r\n            [\"J\",\"J\",0]\r\n            ],\r\n        color: \"36,95,223\",\r\n    },\r\n    L: {\r\n        shape:[\r\n            [0,\"L\",0],\r\n            [0,\"L\",0],\r\n            [0,\"L\",\"L\"]\r\n            ],\r\n        color: \"223,173,36\",\r\n    },\r\n    O: {\r\n        shape:[\r\n            [\"O\",\"O\"],\r\n            [\"O\",\"O\"]\r\n            ],\r\n        color: \"223,217,36\",\r\n\r\n    },\r\n    S: {\r\n        shape:[\r\n            [0,\"S\",\"S\"],\r\n            [\"S\",\"S\",0],\r\n            [0,0,0]\r\n            ],\r\n        color: \"48,211,56\",\r\n    },\r\n    T: {\r\n        shape:[\r\n            [0,0,0],\r\n            [\"T\",\"T\",\"T\"],\r\n            [0,\"T\",0]\r\n            ],\r\n        color: \"132,61,198\",\r\n    },\r\n    Z: {\r\n        shape:[\r\n            [\"Z\",\"Z\",0],\r\n            [0,\"Z\",\"Z\"],\r\n            [0,0,0]\r\n            ],\r\n        color: \"227,78,78\",\r\n    }\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = \"IJLOSTZ\"\r\n    const randTetromino = \r\n        tetrominos[Math.floor(Math.random()* tetrominos.length)]\r\n    return TETROMINOS[randTetromino]\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n    const sweepRows = newStage =>\r\n      newStage.reduce((ack, row) => {\r\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack;\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, []);\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we got some score if collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n      return newStage;\r\n    };\r\n\r\n    // Here are the updates\r\n    setStage(prev => updateStage(prev));\r\n  }, [\r\n    player.collided,\r\n    player.pos.x,\r\n    player.pos.y,\r\n    player.tetromino,\r\n    resetPlayer,\r\n  ]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};\r\n","import styled from \"styled-components\"\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`;","import styled from \"styled-components\"\r\n\r\nexport const StyledCell = styled.div`\r\n    width: auto;\r\n    background: rgba(${props => props.color}, 0.8);\r\n    border: ${props => (props.type === 0 ? \"0px solid\" : \"4px solid\")};\r\n    border-bottom-color: rgba(${props => props.color}, 0.1);\r\n    border-right-color: rgba(${props => props.color}, 1);\r\n    border-left-color: rgba(${props => props.color}, 0.3);\r\n    border-top-color: rgba(${props => props.color}, 1);\r\n`;","import React from \"react\"\r\nimport { StyledCell } from \"./styles/StyledCell\"\r\nimport { TETROMINOS  } from \"../tetrominos\"\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color}></StyledCell>\r\n)\r\n\r\nexport default React.memo(Cell)","import React from \"react\"\r\n\r\nimport { StyledStage } from \"./styles/StyledStage\"\r\n\r\nimport Cell from \"./Cell\"\r\n\r\nconst Stage = ({stage}) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]}/>))}\r\n    </StyledStage>\r\n    \r\n)\r\n\r\nexport default Stage","import styled from \"styled-components\"\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box.sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? \"red\" : \"#999\")};\r\n    background: #000;\r\n`;","import React from \"react\"\r\nimport { StyledDisplay } from \"./styles/StyledDisplay\"\r\n\r\nconst Display = ({gameOver, text}) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display","import styled from \"styled-components\";\r\n\r\nexport const StyledStartButton = styled.button`\r\nbox-sizing: border-box;\r\nmargin: 0 0 20px 0;\r\npadding: 20px;\r\nmin-height: 30px;\r\nwidth: 100%;\r\nborder-radius: 20px;\r\nborder: none;\r\ncolor: white;\r\nbackground: #333;\r\noutline: none;\r\ncursor: pointer;\r\n`;","import React from \"react\"\r\nimport { StyledStartButton } from \"./styles/StyledStartButton\"\r\n\r\nconst StartButton = ({callback}) => (\r\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\r\n)\r\n\r\nexport default StartButton","import React, { useState } from \"react\"\r\n\r\nimport { createStage, checkCollision } from \"../gameHelpers\"\r\n\r\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles/StyledTetris\"\r\n\r\nimport { useInterval } from \"../hooks/useInterval\"\r\nimport { usePlayer } from \"../hooks/usePlayer\"\r\nimport { useStage } from \"../hooks/useStage\"\r\nimport { useGameStatus } from \"../hooks/useGameStatus\"\r\n\r\nimport Stage from \"./Stage\"\r\nimport Display from \"./Display\"\r\nimport StartButton from \"./StartButton\"\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null)\r\n    const [gameOver, setGameOver] = useState(false)\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer()\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer)\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared)\r\n\r\n    console.log(\"re-render\")\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, {x: dir, y:0 })) {\r\n            updatePlayerPos({ x: dir, y: 0})\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        console.log(\"test\")\r\n        setStage(createStage())\r\n        setDropTime(1000)\r\n        resetPlayer()\r\n        setGameOver(false)\r\n        setScore(0)\r\n        setRows(0)\r\n        setLevel(0)\r\n    }\r\n    \r\n    const drop = () => {\r\n        // øk nivå når spilleren har klart 10 rader\r\n        if(rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1)\r\n            setDropTime(1000 / (level + 1) + 200)\r\n        }\r\n\r\n        if (!checkCollision(player, stage, {x: 0, y: 1 })) {\r\n            updatePlayerPos({ x: 0, y: 1, collided: false})\r\n        } else {\r\n            //game over\r\n            if (player.pos.y < 1) {\r\n                console.log(\"game over\")\r\n                setGameOver(true)\r\n                setDropTime(null)\r\n            }\r\n            updatePlayerPos({ x:0, y: 0, collided: true})\r\n        }\r\n    }\r\n    \r\n    const keyUp = ({keyCode}) => {\r\n        if (!gameOver) {\r\n            if(keyCode === 40 || 32) {\r\n                console.log(\"interval on\")\r\n                setDropTime(1000 / (level + 1) + 200)\r\n            }\r\n        }\r\n    }\r\n    \r\n    const dropPlayer = () => {\r\n        console.log(\"interval off\")\r\n        setDropTime(null)\r\n        drop()\r\n    }\r\n\r\n    const instantDrop = () => {\r\n        console.log(\"interval off\")\r\n        setDropTime(null)\r\n        if(rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1)\r\n            setDropTime(1000 / (level + 1) + 200)\r\n        }\r\n        let sjekk = 0//loop for å sjekke hver linje til den møter en som har collision\r\n        while(!checkCollision(player, stage, {x:0, y: sjekk})) {\r\n            console.log(\"while-loop\" + sjekk)\r\n            sjekk++\r\n        }\r\n        /*----------------remember where we came from--------------------\r\n        if (checkCollision(player, stage, {x: 0, y: 1 })) {\r\n            sjekk = 0\r\n        }else if (checkCollision(player, stage, {x: 0, y: 2 })){\r\n            sjekk = 1\r\n        }else if (checkCollision(player, stage, {x: 0, y: 3 })){\r\n            sjekk = 2\r\n        }else if (checkCollision(player, stage, {x: 0, y: 4 })){\r\n            sjekk = 3\r\n        }else if (checkCollision(player, stage, {x: 0, y: 5 })){\r\n            sjekk = 4\r\n        }else if (checkCollision(player, stage, {x: 0, y: 6 })){\r\n            sjekk = 5\r\n        }else if (checkCollision(player, stage, {x: 0, y: 7 })){\r\n            sjekk = 6\r\n        }else if (checkCollision(player, stage, {x: 0, y: 8 })){\r\n            sjekk = 7\r\n        }else if (checkCollision(player, stage, {x: 0, y: 9 })){\r\n            sjekk = 8\r\n        }else if (checkCollision(player, stage, {x: 0, y: 10 })){\r\n            sjekk = 9\r\n        }else if (checkCollision(player, stage, {x: 0, y: 11 })){\r\n            sjekk = 10\r\n        }else if (checkCollision(player, stage, {x: 0, y: 12 })){\r\n            sjekk = 11\r\n        }else if (checkCollision(player, stage, {x: 0, y: 13 })){\r\n            sjekk = 12\r\n        }else if (checkCollision(player, stage, {x: 0, y: 14 })){\r\n            sjekk = 13\r\n        }else if (checkCollision(player, stage, {x: 0, y: 15 })){\r\n            sjekk = 14\r\n        }else if (checkCollision(player, stage, {x: 0, y: 16 })){\r\n            sjekk = 15\r\n        }else if (checkCollision(player, stage, {x: 0, y: 17 })){\r\n            sjekk = 16\r\n        }else if (checkCollision(player, stage, {x: 0, y: 18 })){\r\n            sjekk = 17\r\n        }else if (checkCollision(player, stage, {x: 0, y: 19 })){\r\n            sjekk = 18\r\n        }else if (checkCollision(player, stage, {x: 0, y: 20 })){\r\n            sjekk = 19\r\n        }----------------------------------------------------------*/\r\n\r\n        console.log(sjekk)\r\n        updatePlayerPos({x:0, y:sjekk-1, collided:true}) //flytt tetromino til stedet hvor loopen fant collision\r\n    }    \r\n    \r\n    \r\n    const move = ({keyCode}) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) {\r\n                movePlayer(-1)\r\n            } else if (keyCode === 39) {\r\n                movePlayer(1)\r\n            } else if (keyCode === 40) {\r\n                dropPlayer()\r\n            } else if (keyCode === 38) {\r\n                playerRotate(stage, 1)\r\n            } else if (keyCode === 32) {\r\n                //drop helt ned\r\n                instantDrop()\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop()\r\n    }, dropTime)\r\n\r\n    return (\r\n        <StyledTetrisWrapper \r\n            role=\"button\" \r\n            tabIndex=\"0\" \r\n            onKeyDown={e => move(e)} \r\n            onKeyUp={keyUp}\r\n        >\r\n            <StyledTetris>\r\n                <Stage stage={stage} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ) : (\r\n                        <div>\r\n                            <Display text={`Score: ${score}`} />\r\n                            <Display text={`Rows: ${rows}`} />\r\n                            <Display text={`Level: ${level}`} />\r\n                        </div>\r\n                    )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\n\r\nexport default Tetris","import { useState, useCallback } from \"react\";\r\n\r\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\r\nimport { checkCollision, STAGE_WIDTH } from \"../gameHelpers\";\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    })\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // gjør radene til rekker\r\n        const rotatedTetro = matrix.map((_, index) =>\r\n            matrix.map(col => col[index]),\r\n        )\r\n        //reverse row to get rotated matrix\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse())\r\n        return rotatedTetro.reverse()\r\n    }\r\n\r\n    const playerRotate = (stage, dir) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player))\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir)\r\n\r\n        const pos = clonedPlayer.pos.x\r\n        let offset = 1\r\n        while(checkCollision(clonedPlayer, stage, { x:0, y:0 })) {\r\n            clonedPlayer.pos.x += offset\r\n            offset = -(offset + (offset > 0 ? 1 : -1))\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -dir)\r\n                clonedPlayer.pos.x = pos\r\n                return\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer)\r\n    }\r\n\r\n    const updatePlayerPos = ({ x, y, collided}) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\r\n            collided,\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n            tetromino: randomTetromino().shape,\r\n            collided: false,\r\n        })\r\n    }, [])\r\n\r\n    return [player, updatePlayerPos, resetPlayer, playerRotate]\r\n}","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0)\r\n    const [rows, setRows] = useState(0)\r\n    const [level, setLevel] = useState(0)\r\n\r\n    const linePoints = [40, 100, 300, 1200]\r\n\r\n    const calcScore = useCallback(() => {\r\n        //sjekk om vi har score\r\n        if (rowsCleared > 0) {\r\n            // dette er hvordan originale tetris score blir beregnet\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1))\r\n            setRows(prev => prev + rowsCleared)\r\n        }\r\n    }, [level, linePoints, rowsCleared])\r\n\r\n    useEffect(() => {\r\n        calcScore()\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel]\r\n\r\n}","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n}","import React from \"react\"\nimport Tetris from \"./components/Tetris\"\n\nfunction App() {\n    return (\n    <div>\n        <Tetris />\n    </div>\n    )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}